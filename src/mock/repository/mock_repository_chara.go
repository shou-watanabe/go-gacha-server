// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/repository/chara.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	entity "techtrain-mission/src/domain/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockCharaRepository is a mock of CharaRepository interface.
type MockCharaRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCharaRepositoryMockRecorder
}

// MockCharaRepositoryMockRecorder is the mock recorder for MockCharaRepository.
type MockCharaRepositoryMockRecorder struct {
	mock *MockCharaRepository
}

// NewMockCharaRepository creates a new mock instance.
func NewMockCharaRepository(ctrl *gomock.Controller) *MockCharaRepository {
	mock := &MockCharaRepository{ctrl: ctrl}
	mock.recorder = &MockCharaRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharaRepository) EXPECT() *MockCharaRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockCharaRepository) List(ctx context.Context) ([]*entity.Chara, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*entity.Chara)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCharaRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCharaRepository)(nil).List), ctx)
}
