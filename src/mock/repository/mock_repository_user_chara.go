// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/repository/user_chara.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	entity "techtrain-mission/src/domain/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockUserCharaRepository is a mock of UserCharaRepository interface.
type MockUserCharaRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserCharaRepositoryMockRecorder
}

// MockUserCharaRepositoryMockRecorder is the mock recorder for MockUserCharaRepository.
type MockUserCharaRepositoryMockRecorder struct {
	mock *MockUserCharaRepository
}

// NewMockUserCharaRepository creates a new mock instance.
func NewMockUserCharaRepository(ctrl *gomock.Controller) *MockUserCharaRepository {
	mock := &MockUserCharaRepository{ctrl: ctrl}
	mock.recorder = &MockUserCharaRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCharaRepository) EXPECT() *MockUserCharaRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockUserCharaRepository) List(ctx context.Context, ue entity.User) ([]*entity.UserChara, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, ue)
	ret0, _ := ret[0].([]*entity.UserChara)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserCharaRepositoryMockRecorder) List(ctx, ue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserCharaRepository)(nil).List), ctx, ue)
}

// Store mocks base method.
func (m *MockUserCharaRepository) Store(ctx context.Context, ue entity.User, ces []*entity.Chara) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, ue, ces)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockUserCharaRepositoryMockRecorder) Store(ctx, ue, ces interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockUserCharaRepository)(nil).Store), ctx, ue, ces)
}
